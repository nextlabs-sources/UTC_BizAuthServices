package com.nextlabs.ac;import java.text.MessageFormat;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.Properties;import java.util.StringTokenizer;import java.util.regex.Matcher;import java.util.regex.Pattern;import org.apache.commons.logging.Log;import org.apache.commons.logging.LogFactory;import com.bluejungle.framework.expressions.EvalValue;import com.bluejungle.framework.expressions.IEvalValue;import com.bluejungle.framework.expressions.IMultivalue;import com.bluejungle.framework.expressions.Multivalue;import com.bluejungle.framework.expressions.ValueType;import com.bluejungle.pf.domain.destiny.serviceprovider.IFunctionServiceProvider;import com.bluejungle.pf.domain.destiny.serviceprovider.ServiceProviderException;import com.nextlabs.ac.helper.ACConstants;import com.nextlabs.ac.helper.HSQLHelper;import com.nextlabs.ac.helper.PropertyLoader;import com.nextlabs.ac.helper.QueryBuilder;import com.nextlabs.ac.helper.QueryResultHelper;public class UserService implements IFunctionServiceProvider {	private static final Log LOG = LogFactory.getLog(UserService.class);	private static Properties prop = PropertyLoader			.loadProperties(ACConstants.COMMON_AC_PROPFILE);	private static IEvalValue nullResult = IEvalValue.NULL;	// UTC test Case 5: Bug fix start	private static IEvalValue emptySet = EvalValue.build(Multivalue.EMPTY);	// UTC test Case 5: Bug fix end	// private static HashSet<String> userTableColumnSet;	private static HSQLHelper hsqlHelper;	protected String userIDtype;// Assigned either windowsSID or UserID	private final static String windows_SID = prop			.getProperty("user_col_WindowsSID");	private static IEvalValue emptyString = EvalValue.build("");	private final static String user_ID = prop.getProperty("user_col_UserID");	private final static String AuthIDList = "AuthIDList";	// Name of the	// tables(User,UserCountryMapping,UserAuthorityMapping,AuthorityAuhtorizedUserMapping,Authority)	// is loaded from properties.	private final static String user = prop.getProperty("table_user");	/* global default values which has to be assigned during the initiation of	 * 	 * the service */	public static ThreadLocal<HashMap<String, Object>> userObject = new ThreadLocal<HashMap<String, Object>>() {		@Override		protected HashMap<String, Object> initialValue() {			return null;		}	};	public void init() throws Exception {		LOG.info("UserService init() started.");		if (null != prop) {			hsqlHelper = new HSQLHelper(prop.getProperty("hsql_server_url"),					prop.getProperty("hsql_user_name"),					prop.getProperty("hsql_password"), Integer.parseInt(prop							.getProperty("hsql_connectionpool_size")));		} else {			LOG.info("UserService init() failed to establish a connection with HSQL.");		}		LOG.info("UserService init() completed.");	}	/* builds a hash set of columnaname of user table which will be used in	 * 	 * attribute validation in while getting a attribute for a user	 * 	 * 	 * private void userTableColumnSet() {	 * 	 * userTableColumnSet = new HashSet<String>();	 * 	 * userTableColumnSet.add(prop.getProperty("user_col_WindowsSID")	 * 	 * .toLowerCase());	 * 	 * userTableColumnSet.add(prop.getProperty("user_col_UserID")	 * 	 * .toLowerCase());	 * 	 * userTableColumnSet.add(prop.getProperty("user_col_usertype")	 * 	 * .toLowerCase());	 * 	 * userTableColumnSet.add(prop.getProperty("user_col_FirstName")	 * 	 * .toLowerCase());	 * 	 * userTableColumnSet.add(prop.getProperty("user_col_LastName")	 * 	 * .toLowerCase());	 * 	 * userTableColumnSet.add(prop.getProperty("user_col_USPerson")	 * 	 * .toLowerCase());	 * 	 * userTableColumnSet.add(prop.getProperty("user_col_CompanyId")	 * 	 * .toLowerCase());	 * 	 * userTableColumnSet.add(prop.getProperty("user_col_CGDESS")	 * 	 * .toLowerCase());	 * 	 * userTableColumnSet.add(prop.getProperty("user_col_CGDEExpiration")	 * 	 * .toLowerCase());	 * 	 * LOG.debug("UserService userTableColumnSet:" + userTableColumnSet);	 * 	 * } */	/* This is the function called from Advanced conditions in the policy studio	 * 	 * to perform various evaluations like getAttibute, getAllCountries,	 * 	 * getInternalLicenseNos, getLicenses */	public IEvalValue callFunction(String functionName, IEvalValue[] args)			throws ServiceProviderException {		IEvalValue result = nullResult;		ArrayList<String> inputList;		try {			LOG.info("UtcUserService callfunction() started, with function: "					+ functionName);			long lCurrentTime = System.nanoTime();			inputList = processValues(args);			LOG.info("Argument Length:" + inputList.size());			if ("getAttribute".equalsIgnoreCase(functionName)) {				result = getAttribute(inputList);			} else if ("getLicenses".equalsIgnoreCase(functionName)) {				result = getLicenses(inputList);			} else if ("getInternalLicenseNos".equalsIgnoreCase(functionName)) {				result = getInternalLicenseNos(inputList);			} else if ("getAllCountries".equalsIgnoreCase(functionName)) {				result = getAllCountries(inputList);			} 			LOG.info("UtcUserService callfunction() completed. Result: "					+ result.toString() + " Time spent: "					+ ((System.nanoTime() - lCurrentTime) / 1000000.00) + "ms");		} catch (Exception e) {			LOG.error("UtcUserService callfunction() error: ", e);		}		return result;	}		/* Basic validation of user sevice is done here. This method is added as a	 * part of UTC testcase 5 bug fix */	private boolean basicValidation(ArrayList<String> inputList) {		if (inputList.size() > 0) {			if (!inputList.get(0).isEmpty()) {				identifyUserIdType(inputList.get(0));				return true;			} else {				LOG.error("Error:Incorrect value for UserID in the parameter list ");				return false;			}		} else {			LOG.error("Error:Incorrect no of parameters ");			return false;		}	}	/* This method is called from callfunction to get the internalLicenseno of	 * 	 * the given user */	private IEvalValue getInternalLicenseNos(ArrayList<String> inputList) {		LOG.info("UtcUserService getIntenalLicenseNos() started");		if (!basicValidation(inputList))			return emptySet;		if (inputList.size() < 1) {			LOG.warn("Error:Incorrect no of parameters ");			return emptySet;		}		String userID = inputList.get(0);		QueryBuilder query = prepareQueryForInternalLicenseNos(prepareQueryForLicenses(userID));		ArrayList<String> internalLicenseNoList = hsqlHelper				.getGenAttributeList(query);		if (internalLicenseNoList != null) {			return prepareIEmultivalueFromListofString(internalLicenseNoList);		} else {			return emptySet;		}	}	/* Prepare IMultiValue result from the given list for strings */	private IEvalValue prepareIEmultivalueFromListofString(			ArrayList<String> valueList) {		IEvalValue evalvalue = emptySet;		/* ArrayList<IEvalValue> evs = new ArrayList<IEvalValue>();		 * 		 * for (String value : valueList) {		 * 		 * IEvalValue evalue = EvalValue.build(value);		 * 		 * evs.add(evalue);		 * 		 * } */		if (valueList != null && valueList.size() > 0) {			IMultivalue imv = Multivalue.create(valueList, ValueType.STRING);			evalvalue = EvalValue.build(imv);		}		return evalvalue;	}	/* Identifies whether the User ID is WindowsSID or UserID */	protected void identifyUserIdType(String id) {		LOG.info("UtcUserService identifyUserIdType() started");		Pattern p = Pattern.compile("^[Ss]-[0-9]{1}-[0-9]{1}([0-9]|-)*$");		Matcher m = p.matcher(id);		if (m.matches()) {			userIDtype = windows_SID;		} else {			userIDtype = user_ID;		}		LOG.info("UtcUserService userIDtype() :" + userIDtype);	}	protected ArrayList<String> getGenAttributeList(QueryBuilder qb) {		LOG.info("UtcUserService getGenAttributeList() started. This is called from BizAuthService");		return hsqlHelper.getGenAttributeList(qb);	}	/* This method is called from the callfuntion for getting all countries of	 * 	 * the User */	private IEvalValue getAllCountries(ArrayList<String> inputList) {		LOG.info("UtcUserService getAllCountries() started");		if (!basicValidation(inputList))			return emptySet;		if (inputList.size() < 3) {			LOG.warn("Error:Incorrect no of parameters ");			return emptySet;		}		String userID = "'" + inputList.get(0) + "'";		String jurisdiction = inputList.get(1);		String countryType = "";		// boolean isPhysicalLocationAvailable=false;		String separator = prop.getProperty("get_all_country_separator");		if (jurisdiction != null && !jurisdiction.isEmpty()				&& separator != null) {			countryType = prop.getProperty(jurisdiction);			if (countryType != null) {				StringTokenizer st = new StringTokenizer(countryType, separator);				StringBuilder sb = new StringBuilder("(");				while (st.hasMoreTokens()) {					String type = st.nextToken();					/* if(type.equalsIgnoreCase(prop.getProperty("physical_location"					 * ))) { isPhysicalLocationAvailable=true; } */					sb.append("'");					sb.append(type.toLowerCase().trim());					sb.append("'");					if (st.hasMoreTokens())						sb.append(",");				}				sb.append(")");				countryType = sb.toString();			} else {				LOG.warn("you might have missed the entry in the common_ac property file for '"						+ jurisdiction + "'");				return emptySet;			}		} else {			LOG.warn("Error:Incorrect Jurisdiction type");			return emptySet;		}		String physicalLoaction = inputList.get(2);		QueryBuilder query = prepareAllCountryQuery(userID, countryType);		ArrayList<String> countryList = hsqlHelper.getGenAttributeList(query);		if (countryList != null) {			if (physicalLoaction != null && !physicalLoaction.isEmpty()) {				if (!countryList.contains(physicalLoaction))					countryList.add(physicalLoaction);			}			return prepareIEmultivalueFromListofString(countryList);		} else {			return emptySet;		}	}	/* This method is called from the CallFuntion to get all authorityIDs	 * 	 * associated with the user */	private IEvalValue getLicenses(ArrayList<String> inputList) {		LOG.info("UtcUserService getLicenses() started");		if (!basicValidation(inputList))			return emptySet;		if (inputList.size() < 1) {			LOG.error("Error:Incorrect no of parameters ");			return emptySet;		}		String userID = inputList.get(0);		if (userObject.get() == null) {			LOG.info("Inside UserObject get licenses");			setUser(userID, false, true, true);		}		if (!userID.equalsIgnoreCase((String) userObject.get().get(userIDtype))) {			LOG.info("Inside UserObject get Attribute");			setUser(userID, false, true, true);		}		if (userObject.get() != null) {			/* QueryBuilder query = prepareQueryForLicenses(userID);			 * 			 * ArrayList<String> authorityIDList = hsqlHelper			 * .getGenAttributeList(query); */			ArrayList<String> authorityIDList = null;			if (userObject.get().get(AuthIDList) != null)				authorityIDList = (ArrayList<String>) userObject.get().get(						AuthIDList);			if (authorityIDList != null) {				return prepareIEmultivalueFromListofString(authorityIDList);			}		}		return emptySet;	}	/* Prepares a query for getting all countries from usercountrymappingtable */	protected QueryBuilder prepareAllCountryQuery(String userID,			String countryType) {		LOG.info("UtcUserService prepareAllCountryQuery() called");		QueryBuilder qb = new QueryBuilder();		String query = "SELECT DISTINCT(uc.{0}) FROM {1} u,{2} uc WHERE  u.{3}=uc.{3} AND LCASE(TRIM({3}))=LCASE(TRIM({4})) AND LCASE(TRIM({5})) IN {6}";		Object[] tcargsForQuery = { prop.get("ucm_col_countrycode"), user,				prop.get("table_ucm"), userIDtype, userID,				prop.get("ucm_col_type"), countryType };		qb.setPreparedQuery(MessageFormat.format(query, tcargsForQuery));		LOG.info("UtcUserService Query for gettting AllCountries : "				+ qb.getPreparedQuery());		return qb;	}	/* Prepares a query for getting the authorityid by joining the	 * 	 * AuthorityAuthorizedUserMapping table and UserAuthorityTable Mapping	 * table	 * 	 * for the given user */	private QueryBuilder prepareQueryForLicenses(String userId) {		String otherIDType = getOtherIDType();		LOG.info("userid:" + userId + "otherIDType" + otherIDType);		if (userObject.get() == null) {			LOG.info("Inside UserObject get licenses");			setUser(userId, false, true, false);		}		if (userObject.get() != null				&& userObject.get().get(userIDtype) != null				&& !userId.equalsIgnoreCase((String) userObject.get().get(						userIDtype))) {			LOG.info("Inside UserObject get Attribute");			setUser(userId, false, true, false);		}		String otherIDValue = "";		// Suspect No -1 for null pointer exception		if (userObject.get() != null				&& userObject.get().get(otherIDType) != null) {			otherIDValue = userObject.get().get(otherIDType).toString();		}		if (userId != null) {			userId = userId.toLowerCase();		}		if (otherIDValue != null) {			otherIDValue = otherIDValue.toLowerCase();		}		QueryBuilder qb = new QueryBuilder();		String query = "SELECT {0} FROM {1}  WHERE ({2}={3}) OR ({4}={5}) UNION SELECT {0} FROM {6} WHERE ({2}={3})";		Object[] tcargsForQuery = { prop.get("au_col_AuthorityId"),				prop.get("table_aaum"), userIDtype, "'" + userId + "'",				otherIDType, "'" + otherIDValue + "'", prop.get("table_uam"), };		qb.setPreparedQuery(MessageFormat.format(query, tcargsForQuery));		LOG.info("UtcUserService Query for gettting all authorityIDs : "				+ qb.getPreparedQuery());		return qb;	}	/* Prepares a query for getting the internal license nos from the authoriy	 * 	 * table for the given user */	public String getOtherIDType() {		if (userIDtype != null && userIDtype.equals(user_ID))			return windows_SID;		else			return user_ID;	}	private void setUser(String userid, boolean isCountry, boolean isMain,			boolean isLicenses) {		long lCurrentTime = System.nanoTime();		HashMap<String, Object> tl = new HashMap<String, Object>();		QueryResultHelper qrh = new QueryResultHelper();		if (isMain) {			qrh.setQuery(MessageFormat					.format("SELECT * FROM {0}  WHERE LCASE(TRIM({1}))=LCASE(TRIM(''{2}''))",							prop.getProperty("table_user"), userIDtype, userid));			qrh.getTableFieldList()					.add(prop.getProperty("user_col_WindowsSID"));			qrh.getTableFieldList().add(prop.getProperty("user_col_UserID"));			qrh.getTableFieldList().add(prop.getProperty("user_col_usertype"));			qrh.getTableFieldList().add(prop.getProperty("user_col_FirstName"));			qrh.getTableFieldList().add(prop.getProperty("user_col_LastName"));			qrh.getTableFieldList().add(prop.getProperty("user_col_USPerson"));			qrh.getTableFieldList().add(prop.getProperty("user_col_CompanyId"));			qrh.getTableFieldList().add(prop.getProperty("user_col_CGDESS"));			qrh.getTableFieldList().add(					prop.getProperty("user_col_CGDEExpiration"));			LOG.info(qrh.getQuery());			tl = hsqlHelper.retrieveData(qrh);			if (tl != null)				userObject.set(tl);			else				LOG.warn("User country Data is not enrolled or missing for userid:"						+ userid);			LOG.info("UtcUserService set user completed get a user. Result:  Time spent: "					+ ((System.nanoTime() - lCurrentTime) / 1000000.00) + "ms");		}		lCurrentTime = System.nanoTime();		if (tl != null) {			if (isCountry) {				qrh.setTableFieldList(new ArrayList<String>());				qrh.setQuery(MessageFormat						.format("SELECT {0},{1} FROM {2} uc WHERE LCASE(TRIM({3}))=LCASE(TRIM(''{4}''))",								prop.getProperty("ucm_col_countrycode"),								prop.getProperty("ucm_col_type"),								prop.getProperty("table_ucm"), userIDtype,								userid));				qrh.getTableFieldList().add(prop.getProperty("ucm_col_type"));				qrh.getTableFieldList().add(						prop.getProperty("ucm_col_countrycode"));				HashMap<String, Object> countrymap = hsqlHelper						.retrieveCountries(qrh);				if (countrymap != null)					tl.putAll(countrymap);				LOG.info("UtcUserService set user completed get a country. Result:  Time spent: "						+ ((System.nanoTime() - lCurrentTime) / 1000000.00)						+ "ms");			}			if (isLicenses) {				lCurrentTime = System.nanoTime();				QueryBuilder query = prepareQueryForLicenses(userid);				ArrayList<String> authorityIDList = hsqlHelper						.getGenAttributeList(query);				tl.put(AuthIDList, authorityIDList);				LOG.info("UtcUserService set user completed get licenses. Result:  Time spent: "						+ ((System.nanoTime() - lCurrentTime) / 1000000.00)						+ "ms");			}		}		userObject.set(tl);	}	private QueryBuilder prepareQueryForInternalLicenseNos(QueryBuilder qb) {		Object[] tcargsForQuery = { prop.get("au_col_InternalLicenseNo"),				prop.get("table_au"), prop.get("au_col_AuthorityId") };		StringBuilder query = new StringBuilder(MessageFormat.format(				"SELECT DISTINCT({0}) FROM {1} WHERE {2} in (", tcargsForQuery));		query.append(qb.getPreparedQuery());		query.append(")");		qb.setPreparedQuery(query.toString());		LOG.info("UtcUserService Query for gettting all internalLicensenos : "				+ qb.getPreparedQuery());		return qb;	}	/* This method is invoked by the callfunction to get an attribute of a user	 * 	 * from the DB */	private IEvalValue getAttribute(ArrayList<String> inputList) {		LOG.info("UtcUserService getAttribute() started");		if (!basicValidation(inputList))			return emptyString;		if (inputList.size() < 2) {			LOG.warn("Error:Incorrect no of parameters ");			return emptyString;		}		IEvalValue evalvalue = null;		String userID = inputList.get(0);		String attribute = inputList.get(1);		if (userObject.get() == null) {			LOG.info("Inside UserObject get Attribute");			setUser(userID, true, true, false);			LOG.info("USER TL" + userObject.get());		}		if (!userID.equalsIgnoreCase(userObject.get().get(userIDtype)				.toString())) {			LOG.info("Inside user id" + userObject.get() + " " + userID);			setUser(userID, true, true, false);		}		if (userObject.get() != null) {			if (attribute.isEmpty()) {				LOG.warn("Error:Incorrect value for the attribute ");				return emptyString;			}			Object attributeValue = userObject.get().get(attribute);			/* QueryBuilder query = prepareAttributeQuery(userID, attribute);			 * 			 * Object attributeValue = hsqlHelper.getAttributeForUser(query);			 * 			 * 			 * 			 * Validating for columntypes because certain column is date and			 * others			 * 			 * are string */			if (attributeValue != null) {				if (attribute.equalsIgnoreCase(prop						.getProperty("user_cgdExpiration"))) {					Date da = (Date) attributeValue;					evalvalue = EvalValue.build(da);				} else {					evalvalue = EvalValue.build(attributeValue.toString());				}				LOG.info("UtcUserService getAttribute() returns "						+ attributeValue.toString());			}		} else {			return emptyString;		}		return evalvalue;	}	/* Prepares a query for the getting an attribute of user from user table	 * 	 * 	 * private QueryBuilder prepareAttributeQuery(String userID, String	 * attribute) {	 * 	 * LOG.info("UtcUserService prepareAttributeQuery() called" + attribute);	 * 	 * QueryBuilder qb = new QueryBuilder(); userTableColumnSet();	 * 	 * if (attribute != null) {	 * 	 * if (userTableColumnSet.contains(attribute.toLowerCase())) {	 * LOG.info("inseide usertable" + attribute);	 * 	 * String query =	 * "SELECT {0} FROM {3} WHERE LCASE(TRIM({1}))=LCASE(TRIM({2}))";	 * 	 * Object[] tcargsForQuery = { attribute, userIDtype, userID, user };	 * 	 * qb.setPreparedQuery(MessageFormat.format(query.toString(),	 * 	 * tcargsForQuery));	 * 	 * } else {	 * 	 * String query =	 * " SELECT uc.{0} FROM {5} u,{6} uc WHERE uc.{1}=u.{1} AND LCASE(TRIM({1}))=LCASE(TRIM({2})) AND LCASE(TRIM(uc.{3}))=LCASE(TRIM({4}))"	 * ;	 * 	 * Object[] tcargsForQuery = { prop.get("ucm_col_countrycode"),	 * 	 * userIDtype, userID, prop.get("ucm_col_type"),	 * 	 * "'" + attribute + "'", user,	 * 	 * prop.getProperty("table_ucm") };	 * 	 * qb.setPreparedQuery(MessageFormat.format(query.toString(),	 * 	 * tcargsForQuery));	 * 	 * }	 * 	 * }	 * 	 * LOG.info("UtcUserService Query for gettting Attribute : "	 * 	 * + qb.getPreparedQuery());	 * 	 * return qb;	 * 	 * } */	/* Process the input data and put in a Arraylist of string */	protected ArrayList<String> processValues(IEvalValue[] args) {		int i = 0;		ArrayList<String> sOutData = new ArrayList<String>();		for (IEvalValue ieValue : args) {			String sData = "";			if (null != ieValue) {				LOG.info("ieValue.getType()" + ieValue.getType());				if (ieValue.getType() == ValueType.STRING) {					sData = ieValue.getValue().toString();				}				LOG.info("----" + i + "." + sData + "-----");				sOutData.add(sData);			}			i++;		}		return sOutData;	}	/* This is main function is to test in the local and can be removed later */	public static void main(String[] args) throws Exception {		UserService plugin = new UserService();		plugin.init();		IEvalValue[] sDataArr = new IEvalValue[3];		sDataArr[0] = EvalValue.build("icy.qin");		sDataArr[1] = EvalValue.build("CountryOfBirth");		sDataArr[2] = EvalValue.build("");		// sDataArr[1] = EvalValue.build("CompanyId");		System.out.println("Result: "				+ plugin.callFunction("getAllCountries", sDataArr));	}}